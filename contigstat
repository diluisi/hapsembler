#!/usr/bin/perl

############################################################################
#
#     Part of Hapsembler package. See the README file for more information.
#     Copyright (C) 2011,  Nilgun Donmez <nild@cs.toronto.edu>
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################

use strict;
use Getopt::Long;

my $N = -1;
my $G = -1;
my $L = -1;
my $T = -1;

my $teta;
my $sigma;
my $c;
my $guess;
my $hlp;

sub usage
{
    print "\nusage: contigstat <at least 4 out of 5 parameters below>\n\n";

    print "  --num-reads | -r # : Number of reads uniformly sampled from the genome.\n";
    print "  --genome-size | -s # : Approximate genome size in mega base pairs.\n";
    print "  --read-length | -l # : Average read length in base pairs.\n";
    print "  --overlap-size | -o # : Minimum overlap size in base pairs.\n";
    print "  --guess-mode | -g : If this flag is set, one of the parameters <-r> or <-o> above can be omitted.";
    print "In this mode, the program will compute the optimal value for the omitted parameter.\n";

    print "\nGiven the appropriate parameters, this program ";
    print "can be used in 2 different ways. If the first four parameters are given ";
    print "the program computes the expected number and length of contigs. If the ";
    print "guess mode is on, the program will compute the value for an omitted ";
    print "parameter so that the expected number of contigs will be 1.\n\n";

    print "WARNING: This script does not account for polymorphism, ";
    print "sequencing errors or repeats and assumes uniform coverage and ";
    print "fixed read length. The estimates reported by this script should ";
    print "be taken as very loose upper bounds. Estimates that are out of ";
    print "bounds (eg. expected contig size greater than the genome size) ";
    print "should also be disregarded.\n\n";

    exit(0);
}

unless(@ARGV > 6)   {   &usage; exit(0); }

my $result = GetOptions("num-reads|r=i" => \$N,
                            "genome-size|s=f" => \$G,
                            "read-length|l=f" => \$L,
                            "overlap-size|o=i" => \$T,
                            "guess-mode|g" => \$guess,
                            "help|h" => \$hlp
                            );

unless($result) { &usage; exit(0); }
if($hlp) { &usage; }

$G = $G * 1000000;

if($guess)
{
    if($N < 0)  # N is not set
    {
        $teta = ($T/$L);
        $c = log($G)/(1 - $teta);
        $N = ($c * $G)/$L;

        printf("To get a single contig of the genome at least %.2f number of reads must be sampled.\n", $N);
    }
    elsif($T < 0)
    {
        $T = $L - ($G * $L * log($G))/($L*$N);
        if($T < 0)
        {
            print STDERR "Sorry, for these parameters there is no valid overlap size to get a single contig! ";
            print STDERR "Try to increase the length of reads or sample more reads.\n";
            exit(0);
        }
        printf("To get a single contig of the genome set minimum overlap size to %.2f base pairs.\n", $T);
    }
    else
    {
        &usage; exit(0);
    }

    if(log($G) > $L*(1-($T/$L)))
    {
        print STDERR "Estimate above may not be valid!\n";
        print STDERR "You must make sure ln(genome_size) < read_length * (1 - (overlap_size/read_length)) to get a valid estimate\n";
    }
}
else
{
    $teta = ($T/$L);
    $sigma = 1 - ($T/$L);
    $c = ($L * $N) / $G;    # coverage

    printf("\nExpected number of contigs (non-single): \t %.2f \n", $N*(exp(-1*$c*$sigma) - exp(-2*$c*$sigma)));
    printf("Expected length of a contig: \t\t\t %.2f \n", $L * ( (exp($c*$sigma) - 1)/$c + $teta ) );
    printf("Expected number of single read contigs: \t %.2f \n", $N*(exp(-2*$c*$sigma)) );
    printf("Expected number of reads in a contig: \t\t %.2f \n", exp($c*$sigma) );
    printf("Expected length of a gap between 2 contigs: \t %.2f \n", $L*(exp(-1*$c*$teta))/$c );
    printf("Order of minimum length for a contig: \t\t %.2f \n", $L*(exp((3*$c*$sigma)/4))/$c );
    printf("Order of maximum length for a gap: \t\t max[0, %.2f]\n\n", ($L*(2*log($G/$L) + 2*log($c) - $c))/$c );
}
