#!/usr/bin/perl

####################################
# Author: Nilgun Donmez
# Date: February 27, 2013
# Part of Scarpa package
####################################

use strict;
use Getopt::Long;

sub usage
{
	print STDERR "\nusage: scarpa_parser --errors|-e <# of mismatches> \n\n";
	print STDERR "Part of Scarpa package. Takes a .SAM file from standard input ";
	print STDERR "and converts it to a .map file to be used by Scarpa. ";
	print STDERR "--errors option specify the maximum allowed mismatches or indels ";
	print STDERR "in the mapping. Default value is 0. \n\n";
	exit(0);
}

my $errcutoff = 0;
my $hlp = 0;
my $result = GetOptions("errors|e=i" => \$errcutoff, "help|h" => \$hlp);

unless($result) { &usage; }
if($hlp) { &usage; }

while(<STDIN>)
{
	my $str = $_;
	my @fields = split(' ', $str, 12);
	
	if($fields[0] eq "\@SQ")
	{
		unless($fields[1] =~ /contig_/)
		{
			die "Error: unrecognized reference name. Please make sure to run scarpa_process on your data before mapping.\n";
		}
		print "-1 ", substr($fields[1], 10), " ", substr($fields[2], 3), "\n";
	}
	elsif(not($fields[0] =~ /^@/))
	{
		my $numerr = 0;
		
		unless($fields[1] & 0x4)
		{		
			if($fields[11] =~ /NM:i:([0-9]+)/)		# otherwise assume edit distance is 0
			{
				$numerr = $1;
			}
			
			if($numerr le $errcutoff)
			{
				print $fields[0];
				if($fields[1] & 0x10)	# then it is reverse complemented
				{
					print " 1 ";
				}
				else
				{
					print " 2 ";
				}
				print substr($fields[2], 7), " ", $fields[3], " ", length($fields[9]), " ", $numerr, "\n";
			}
		}
	}
}

